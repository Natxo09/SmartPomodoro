---
interface Playlist {
    name: string;
    url: string;
    thumbnail: string;
}

const playlists: Playlist[] = [
    { name: "Lofi Girl", url: "https://www.youtube.com/embed/jfKfPfyJRdk", thumbnail: "https://i.ytimg.com/vi/jfKfPfyJRdk/maxresdefault.jpg" },
    { name: "Chillhop", url: "https://www.youtube.com/embed/5yx6BWlEVcY", thumbnail: "https://i.ytimg.com/vi/5yx6BWlEVcY/maxresdefault.jpg" },
    { name: "Coffee Shop", url: "https://www.youtube.com/embed/lP26UCnoH9s", thumbnail: "https://i.ytimg.com/vi/lP26UCnoH9s/maxresdefault.jpg" },
    { name: "Jazz Bar", url: "https://www.youtube.com/embed/Dx5qFachd3A", thumbnail: "https://i.ytimg.com/vi/Dx5qFachd3A/maxresdefault.jpg" },
    { name: "Classical Music", url: "https://www.youtube.com/embed/mGQLXRTl3Z0", thumbnail: "https://i.ytimg.com/vi/mGQLXRTl3Z0/maxresdefault.jpg" },
];
---

<button
    id="musicToggle"
    class="fixed bottom-6 right-6 p-4 rounded-full bg-white/10 dark:bg-black/10 backdrop-blur-lg border border-white/20 dark:border-neutral-800/30 shadow-lg hover:scale-105 active:scale-95 transition-all duration-200 text-neutral-600 dark:text-neutral-400 z-50"
    aria-label="Toggle music player"
>
    <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"/>
    </svg>
</button>

<div
    id="musicPanel"
    class="fixed bottom-24 right-6 w-80 bg-white/10 dark:bg-black/10 backdrop-blur-lg border border-white/20 dark:border-neutral-800/30 rounded-2xl shadow-lg transform translate-y-[120%] opacity-0 transition-all duration-500 ease-out z-40 hidden"
>
    <div class="p-4 space-y-4">
        <div class="flex items-center gap-3">
            <div class="w-12 h-12 overflow-hidden rounded-lg">
                <img 
                    id="playlistThumbnail"
                    src={playlists[0].thumbnail}
                    alt="Playlist thumbnail"
                    class="w-full h-full object-cover"
                />
            </div>
            <div class="flex-1 min-w-0">
                <select 
                    id="playlistSelect"
                    class="w-full px-3 py-1.5 rounded-lg bg-white/5 dark:bg-black/5 text-neutral-700 dark:text-neutral-200 border border-white/10 dark:border-neutral-800/30 text-sm font-medium focus:outline-none focus:ring-2 focus:ring-rose-500/20"
                >
                    {playlists.map(playlist => (
                        <option value={playlist.name}>{playlist.name}</option>
                    ))}
                </select>
            </div>
        </div>

        <div class="flex flex-col gap-2">
            <div class="flex items-center justify-center gap-4">
                <button 
                    id="playPauseBtn"
                    class="w-12 h-12 rounded-full bg-rose-500/90 hover:bg-rose-600/90 text-white flex items-center justify-center transition-all duration-200 group"
                    aria-label="Play/Pause"
                >
                    <svg id="playIcon" xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                    </svg>
                    <svg id="pauseIcon" xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6" />
                    </svg>
                </button>
            </div>

            <div class="flex items-center gap-3 px-1">
                <svg id="volumeIcon" xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 text-neutral-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path id="volumeMuted" class="hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z M17 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2" />
                    <path id="volumeLow" class="hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072M12 6l8.5-6v24l-8.5-6H5a2 2 0 01-2-2V8a2 2 0 012-2h7z" />
                    <path id="volumeMedium" class="hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.071 5.929a9 9 0 010 12.728M15.536 8.464a5 5 0 010 7.072M12 6l8.5-6v24l-8.5-6H5a2 2 0 01-2-2V8a2 2 0 012-2h7z" />
                    <path id="volumeHigh" class="hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21.5 4.5a13 13 0 010 15M19.071 5.929a9 9 0 010 12.728M15.536 8.464a5 5 0 010 7.072M12 6l8.5-6v24l-8.5-6H5a2 2 0 01-2-2V8a2 2 0 012-2h7z" />
                </svg>
                <input 
                    type="range"
                    min="0"
                    max="100"
                    value="50"
                    id="volumeControl"
                    class="flex-1"
                />
            </div>
        </div>

        <div id="player"></div>

        <div class="text-xs text-neutral-500 dark:text-neutral-400 flex items-center gap-2 bg-yellow-500/10 dark:bg-yellow-300/5 rounded-lg p-2.5">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-yellow-600 dark:text-yellow-400 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
            <span>If you experience playback issues, consider disabling AdBlock on this page (YouTube Policy)</span>
        </div>
    </div>
</div>

<script>
        interface Playlist {
        name: string;
        url: string;
        thumbnail: string;
    }
    declare global {
        interface Window {
            onYouTubeIframeAPIReady: () => void;
            YT: {
                Player: any;
                PlayerState: {
                    ENDED: number;
                }
            }
        }
    }

        // Get playlists from frontmatter
        const playlists = (window as any).playlists || [
        { name: "Lofi Girl", url: "https://www.youtube.com/embed/jfKfPfyJRdk", thumbnail: "https://i.ytimg.com/vi/jfKfPfyJRdk/maxresdefault.jpg" },
        { name: "Chillhop", url: "https://www.youtube.com/embed/5yx6BWlEVcY", thumbnail: "https://i.ytimg.com/vi/5yx6BWlEVcY/maxresdefault.jpg" },
        { name: "Coffee Shop", url: "https://www.youtube.com/embed/lP26UCnoH9s", thumbnail: "https://i.ytimg.com/vi/lP26UCnoH9s/maxresdefault.jpg" },
        { name: "Jazz Bar", url: "https://www.youtube.com/embed/Dx5qFachd3A", thumbnail: "https://i.ytimg.com/vi/Dx5qFachd3A/maxresdefault.jpg" },
        { name: "Classical Music", url: "https://www.youtube.com/embed/mGQLXRTl3Z0", thumbnail: "https://i.ytimg.com/vi/mGQLXRTl3Z0/maxresdefault.jpg" }
    ];

    let player: any;
    let isPlaying = false;

    const tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";
    const firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode?.insertBefore(tag, firstScriptTag);

    function extractVideoId(url: string) {
        const match = url.match(/embed\/([\w-]+)/);
        return match ? match[1] : '';
    }

    window.onYouTubeIframeAPIReady = function() {
        const allPlaylists = playlists;  // Reference the playlists from frontmatter
        const firstVideo = extractVideoId(allPlaylists[0].url);
        player = new window.YT.Player('player', {
            height: '0',
            width: '0',
            videoId: firstVideo,
            playerVars: {
                autoplay: 0,
                controls: 0,
                disablekb: 1,
                enablejsapi: 1,
                modestbranding: 1,
                origin: window.location.origin
            },
            events: {
                onStateChange: onPlayerStateChange
            }
        });
    };

    function onPlayerStateChange(event: any) {
        if (event.data === window.YT.PlayerState.ENDED) {
            isPlaying = false;
            updatePlayPauseButton();
        }
    }

    function updatePlayPauseButton() {
        const playIcon = document.getElementById('playIcon');
        const pauseIcon = document.getElementById('pauseIcon');
        if (isPlaying) {
            playIcon?.classList.add('hidden');
            pauseIcon?.classList.remove('hidden');
        } else {
            playIcon?.classList.remove('hidden');
            pauseIcon?.classList.add('hidden');
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        const musicToggle = document.getElementById('musicToggle');
        const musicPanel = document.getElementById('musicPanel');
        const playPauseBtn = document.getElementById('playPauseBtn');
        const playlistSelect = document.getElementById('playlistSelect') as HTMLSelectElement;
        const volumeControl = document.getElementById('volumeControl') as HTMLInputElement;
        const thumbnail = document.getElementById('playlistThumbnail') as HTMLImageElement;

        musicToggle?.addEventListener('click', () => {
            if (musicPanel?.classList.contains('hidden')) {
                // Mostrar el panel
                musicPanel.classList.remove('hidden');
                setTimeout(() => {
                    musicPanel?.classList.remove('translate-y-[120%]');
                    musicPanel?.classList.remove('opacity-0');
                }, 10);
            } else {
                // Ocultar el panel
                musicPanel?.classList.add('translate-y-[120%]');
                musicPanel?.classList.add('opacity-0');
                // Esperar a que termine la animación antes de ocultar
                setTimeout(() => {
                    musicPanel?.classList.add('hidden');
                }, 500); // Este tiempo debe coincidir con duration-500
            }
        });

        playPauseBtn?.addEventListener('click', () => {
            if (!player) return;
            
            if (isPlaying) {
                player.pauseVideo();
            } else {
                player.playVideo();
            }
            isPlaying = !isPlaying;
            updatePlayPauseButton();
        });

        playlistSelect?.addEventListener('change', () => {
            const allPlaylists = playlists;
            const selectedPlaylist = allPlaylists.find((p: Playlist) => p.name === playlistSelect.value);
            if (!selectedPlaylist || !player) return;

            const videoId = extractVideoId(selectedPlaylist.url);
            player.loadVideoById(videoId);
            thumbnail.src = selectedPlaylist.thumbnail;
            isPlaying = true;
            updatePlayPauseButton();
        });

        function updateVolumeIcon(volume: number) {
            const volumeMuted = document.getElementById('volumeMuted');
            const volumeLow = document.getElementById('volumeLow');
            const volumeMedium = document.getElementById('volumeMedium');
            const volumeHigh = document.getElementById('volumeHigh');

            // Ocultar todos los iconos primero
            [volumeMuted, volumeLow, volumeMedium, volumeHigh].forEach(icon => {
                icon?.classList.add('hidden');
            });

            // Mostrar el icono correspondiente
            if (volume === 0) {
                volumeMuted?.classList.remove('hidden');
            } else if (volume < 33) {
                volumeLow?.classList.remove('hidden');
            } else if (volume < 66) {
                volumeMedium?.classList.remove('hidden');
            } else {
                volumeHigh?.classList.remove('hidden');
            }
        }

        volumeControl?.addEventListener('input', (e) => {
            const volume = Number((e.target as HTMLInputElement).value);
            if (player) {
                player.setVolume(volume);
            }
            updateVolumeIcon(volume);
        });

        // Inicializar el icono con el valor por defecto
        updateVolumeIcon(50);
    });
</script>

<style>
    input[type="range"] {
        @apply appearance-none bg-white/10 dark:bg-black/10 h-1.5 rounded-full;
    }

    input[type="range"]::-webkit-slider-thumb {
        @apply appearance-none w-3 h-3 rounded-full bg-white cursor-pointer;
    }

    input[type="range"]::-webkit-slider-runnable-track {
        @apply rounded-full bg-white/20 dark:bg-white/10;
    }

    select {
        @apply appearance-none bg-transparent;
    }
</style>